File '../../feat_extractor/crf_feat/src/CrfFeatExtractor.cpp'
Lines executed:80.00% of 120
Creating 'CrfFeatExtractor.cpp.gcov'
        -:    0:Source:../../feat_extractor/crf_feat/src/CrfFeatExtractor.cpp
        -:    0:Graph:CrfFeatExtractor.gcno
        -:    0:Data:CrfFeatExtractor.gcda
        -:    0:Runs:1
        -:    0:Programs:1
        -:    1:/*************************************************************************
        -:    2:	> File Name: NerFeatExtractor.cpp
        -:    3:	> Author: TengyueMa
        -:    4:	> Mail: lumujin@icloud.com
        -:    5:	> Created Time: 一  1/29 15:46:02 2018
        -:    6: ************************************************************************/
        -:    7:
        -:    8:#include <iostream>
        -:    9:#include "utils.h"
        -:   10:#include "PreProcessor.h"
        -:   11:#include "CrfFeatExtractor.h"
        -:   12:#include "CrfFeatErrorCode.h"
        -:   13:#include "ul_log.h"
        -:   14:#include "Configure.h"
        -:   15:#include "spreg.h"
        -:   16:#include "SluLog.h"
        -:   17:
        -:   18:using namespace std;
        -:   19:using namespace utils;
        -:   20:
        -:   21:LogModule * loginstance;
        -:   22:
        -:   23:namespace feat_extractor{
        -:   24:
        2:   25:extern "C" FeatExtractor* create_feat_extr(const string confpath, 
        -:   26:                                           PreProcessor* pre){
        -:   27:    if (pre == NULL){
        -:   28:        //< nothing;
        -:   29:    }
        2:   30:    CrfFeatExtractor* crf_feat_extr = new CrfFeatExtractor(confpath, pre);
        2:   31:    return dynamic_cast<FeatExtractor *>(crf_feat_extr);
        -:   32:}
        -:   33:
        1:   34:extern "C" void delete_feat_extr(FeatExtractor* feat_extr){
        1:   35:    CrfFeatExtractor* crf_feat_extr = dynamic_cast<CrfFeatExtractor *>(feat_extr);
        -:   36:    //delete crf_feat_extr;
        1:   37:    crf_feat_extr = NULL;
        1:   38:}
        -:   39:
        -:   40://< 构造函数
       31:   41:CrfFeatExtractor::CrfFeatExtractor(const string confpath, 
       31:   42:                                   PreProcessor* pre){
       31:   43:    int ret = init_conf(confpath, pre);
       31:   44:    if (ret < 0){
    #####:   45:        cout << "failed to load crf feat config file in" << confpath << endl;
    #####:   46:        exit(-1);
        -:   47:    }
       31:   48:}
        -:   49:
        -:   50://< load conf
       31:   51:int CrfFeatExtractor::init_conf(const string confpath, 
        -:   52:                                PreProcessor* pre){
        -:   53:    //< not use
       31:   54:    if (pre == NULL){
    #####:   55:        cout << "pre == NULL" << endl;
        -:   56:    }
       31:   57:    comcfg::Configure config;
       31:   58:    int ret = config.load("./", confpath.c_str());
       31:   59:    if (ret < 0){
    #####:   60:        cout << "failed to load crf feat config file in " << confpath << endl;
    #####:   61:        return ERR_CRFFEAT_LOAD_CONFIG;
        -:   62:    }
        -:   63:
        -:   64:    //init log
        -:   65:    try {
       31:   66:        string log_file = config["CRF_FEAT_LOG_CONF"].to_cstr();
       31:   67:		if(NULL == loginstance){
        1:   68:			loginstance = new hobotlog::LogModule(log_file);
        1:   69:			loginstance->info("[SLU]: load crf feat log conf,and init loginstance success!");
       31:   70:		}
    =====:   71:    }catch(...){
    =====:   72:        cout << "do not set log file in crf feat conf: " << confpath << endl;
    =====:   73:        return ERR_CRFFEAT_NOT_SET_LOG_FILE;
        -:   74:    }
        -:   75:
        -:   76:    //< load
       62:   77:    vector<pair<string, string> > dictlist;
        -:   78:
        -:   79:    try {
        -:   80:        int dict_size;
        -:   81:        try {
       31:   82:            dict_size = static_cast<int>(config["DICT_FEATURE"].size());
    =====:   83:        } catch(...){
    =====:   84:            dict_size = 0;
        -:   85:        }
        -:   86:
       65:   87:        for (int i = 0; i < dict_size; i++){
       34:   88:            string dict_name = config["DICT_FEATURE"][i]["DICT_NAME"].to_cstr();
       68:   89:            string dict_path = config["DICT_FEATURE"][i]["DICT_PATH"].to_cstr();
       34:   90:            dictlist.push_back(pair<string, string>(dict_name, dict_path));
       34:   91:            dictname_vec.push_back(dict_name);
       34:   92:        }
    =====:   93:    } catch(...) {
    =====:   94:        loginstance->error("[SLU]: failed to load crf feat config file: " + confpath + ", conf content is wrong");
    =====:   95:        return ERR_CRFEAT_CONFIG_CONTENT;
        -:   96:    }
        -:   97:
       31:   98:    loginstance->info("\n[SLU]: load crf feat config file success！config name:" + confpath);
        -:   99:    
       31:  100:    ret = load_dict(dictlist);
       31:  101:    if(ret < 0) {
    #####:  102:        loginstance->error("[SLU]: failed to load crf feat dict");
    #####:  103:        return ret;
        -:  104:    }
        -:  105:
       62:  106:    return 0;
        -:  107:}
        -:  108:
        -:  109://< 析构函数
        2:  110:CrfFeatExtractor::~CrfFeatExtractor(){
        -:  111:    
        2:  112:}
        -:  113:
        -:  114://< 对外接口
        3:  115:int CrfFeatExtractor::get_feat(feature::Feature& feat, 
        -:  116:                               const string query){
        3:  117:    vector<string> seq_vec;
        3:  118:    strSplit2simple(query, seq_vec);
        3:  119:    get_dict_feature(seq_vec, dictname_vec);
        3:  120:    feat.feats = seq_vec;
        -:  121:
        3:  122:    return 0;
        -:  123:}
        -:  124:
        -:  125://< load dict & build trie tree
       34:  126:int CrfFeatExtractor::load_dict(const string dictname, 
        -:  127:                                const string dictpath){
       34:  128:    TrieTree* trie = new TrieTree(dictpath);
       34:  129:    trie_map[dictname] = trie;
        -:  130:
       34:  131:    return 0;
        -:  132:}
        -:  133:
       31:  134:int CrfFeatExtractor::load_dict(const vector<pair<string, string> > dictname_path){
       65:  135:    for (size_t i = 0; i < dictname_path.size(); i++){
       34:  136:        load_dict(dictname_path[i].first, dictname_path[i].second);
        -:  137:    }
        -:  138:
       31:  139:    return 0;
        -:  140:}
        -:  141:
        -:  142://< get dict feature
        -:  143://< @param seq_vec : 分割后的字符串 & 返回特征结果
        -:  144://< 待匹配的特征辞典名称
        3:  145:int CrfFeatExtractor::get_dict_feature(vector<string>& seq_vec, 
        -:  146:                                       const vector<string> dict_name_vec){
        3:  147:    int ret = 0;
        3:  148:    vector<string> cha_vec = seq_vec;
        3:  149:    size_t count = dict_name_vec.size();
        3:  150:    if (count == 0){
        1:  151:        vector<string> tags;
        1:  152:        tags.clear();
        1:  153:        tags.resize(seq_vec.size(), "O");
        1:  154:        ret = cat_feat(seq_vec, tags);
        1:  155:        if (ret < 0){
    #####:  156:            loginstance->error("[SLU]: failed to cat crf feat!");
    #####:  157:            return ret;
        -:  158:        }
        1:  159:        return 0;
        -:  160:    }
        -:  161:
        6:  162:    for (size_t i = 0; i < count; i++){
        -:  163:        //< 匹配
        4:  164:        vector<string> tags;
        4:  165:        ret = getfeat_dict(cha_vec, tags, trie_map[dict_name_vec[i]], dict_name_vec[i]);
        4:  166:        if(ret < 0){
    #####:  167:            loginstance->error("[SLU]: failed to get crf dict feat!");
    #####:  168:            return ret;
        -:  169:        }
        -:  170:
        -:  171:        //< cat dictfeature
        4:  172:        ret = cat_feat(seq_vec, tags);
        4:  173:        if (ret < 0){
    #####:  174:            loginstance->error("[SLU]: failed to cat crf feat!");
    #####:  175:            return ret;
        -:  176:        }
        4:  177:    }
        -:  178:
        2:  179:    return 0;
        -:  180:}
        -:  181:
        -:  182://< 获取指定辞典的特征
        4:  183:int CrfFeatExtractor::getfeat_dict(const vector<string> seq_vec, 
        -:  184:                                   vector<string>& tags, 
        -:  185:                                   TrieTree* trie, 
        -:  186:                                   const string featname){
        4:  187:    int length = int(seq_vec.size());
        4:  188:    tags.clear();
        4:  189:    tags.resize(length, "O");
        -:  190:
       20:  191:    for (int i = 0; i < length; i++){
       16:  192:        int len = trie->match(seq_vec, i);
       16:  193:        if (len <= 0){
       14:  194:            continue;
        -:  195:        }
        2:  196:        if (tags[i] != "O" || tags[i+len-1] != "O"){
    #####:  197:            continue;    
        -:  198:        }
        6:  199:        for (int j = 0; j < len; j++){
        4:  200:            tags[i+j] = featname + "+i";
        4:  201:            if (j == 0){
        2:  202:                tags[i+j] = featname + "+b";
        -:  203:            }
        4:  204:            if (j == len-1){
        2:  205:                tags[i+j] = featname + "+e";
        -:  206:            }
        4:  207:            if (len == 1){
        1:  208:                tags[i+j] = featname + "+s";
        -:  209:            }
        -:  210:        }
        2:  211:        i += len-1;
        -:  212:    }
        -:  213:
        4:  214:    return 0;
        -:  215:}
        -:  216:
        -:  217://< cat feature
        5:  218:int CrfFeatExtractor::cat_feat(vector<string>& seq_vec, 
        -:  219:                               const vector<string>& tags){
        5:  220:    int ret = seq_vec.size() != tags.size();
        5:  221:    if (ret < 0){
    #####:  222:        loginstance->error("[SLU]: failed to cat crf feat!");
    #####:  223:        return ERR_CRFFEAT_SEQ_TAGS_UNEQUAL;
        -:  224:    }
        5:  225:    size_t count = seq_vec.size();
       32:  226:    for (size_t i = 0; i < count; i++){
       27:  227:        seq_vec[i] += " " + tags[i];
        -:  228:    }
        -:  229:
        5:  230:    return 0;
        -:  231:}
        -:  232:
        3:  233:} //< namespace slot_filling
        -:  234:
        -:  235:/* vim: set expandtab ts=4 sw=4 sts=4 tw=100: */
